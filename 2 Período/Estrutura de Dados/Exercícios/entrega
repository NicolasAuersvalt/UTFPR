 // SUM

#include "list.h"

/* */
int sum (List *l) {
  /*Terminar!*/	

   int sum=0;
   
   List *t;

   for(t=l; t != NULL; t= t->next){ // o(n+1)
	   
     sum += t->data;

  }

   return sum;

}

/* */
int main () {
  int k;
  List *l = NULL;
  for (k = 0; k <= 4; k++) 
    l = insert (l, k);
  for (k = 9; k >= 5; k--) 
    l = insert (l, k);
  print (l);
  printf("Sum = %d\n", sum(l));
  destroy (l);
  return 0;
}







// Insert Back

List* insert_back (List *l, int elem) {
  /* Terminar! */
  
  List *node = (List *)malloc(sizeof(List));
  node->data = elem;
  node->next = NULL;
  if(l==NULL){
    return node;
  }
  else{
    List *t = l;
    while(t->next !=NULL)
      t = t->next;
    t->next = node;
    return l;
  }
}






// In (sem o insert_back)

/* */
int in (List *l, int k) {
  /*Terminar!*/	

  // *t
  
  List *t;

  for(t=l; ((t!=NULL)); t=t->next){

     if((t->data)==k)
       return 1;

  }
  return 0;
}

/* */
int main () {
  int k;
  List *l = NULL;
  for (k = 0; k <= 4; k++) 
    l = insert (l, k);
  for (k = 9; k >= 5; k--) 
    l = insert (l, k);
  print (l);
  printf("Pertence %d = %d?\n", 9, in(l, 9));
  printf("Pertence %d = %d?\n", -1, in(l, -1));
  destroy (l);
  return 0;
}

/* */
int main () {
  int k;
  List *l = NULL;
  for (k = 0; k <= 4; k++) 
    l = insert (l, k);
  for (k = 9; k >= 5; k--) 
    l = insert (l, k);
  print (l);
  printf("Pertence %d = %d?\n", 9, in(l, 9));
  printf("Pertence %d = %d?\n", -1, in(l, -1));
  destroy (l);
  return 0;
}







// Merge

List *merge(List *A, List *B) {
    List *C = NULL;
    List *T = NULL; 

    if (A == NULL)
        return B;
    if (B == NULL)
        return A;

    if (A->data <= B->data) {
        C = A;
        A = A->next;
    } else {
        C = B;
        B = B->next;
    }

    T = C; 

    while (A != NULL && B != NULL) {
        if (A->data <= B->data) {
            T->next = A;
            A = A->next;
        } else {
            T->next = B;
            B = B->next;
        }
        T = T->next; 
    }

    if (A != NULL)
        T->next = A;
    else if (B != NULL)
        T->next = B;

    return C;
}